// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  INSTRUCTOR
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  passwordHash String   @map("password_hash")
  role         UserRole @default(STUDENT)

  questions Question[]
  Answer    Answer[]

  @@map("users")
}

model Question {
  id           String    @id @default(uuid())
  title        String
  content      String
  slug         String    @unique
  bestAnswerId String?   @unique @map("best_answer_id")
  authorId     String    @map("author_id")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime? @updatedAt @map("updated_at")

  answers    Answer[]
  bestAnswer Answer?  @relation("bestAnswer", fields: [bestAnswerId], references: [id])
  author     User     @relation(fields: [authorId], references: [id])

  @@map("questions")
}

model Answer {
  id         String    @id @default(uuid())
  content    String
  questionId String    @map("question_id")
  authorId   String    @map("author_id")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  author       User      @relation(fields: [authorId], references: [id])
  question     Question  @relation(fields: [questionId], references: [id])
  bestAnswerOn Question? @relation("bestAnswer")

  @@map("answers")
}
